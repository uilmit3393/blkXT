def perspect_transform1(img):
    img_size = (img.shape[1], img.shape[0])
    # Define calibration box in source (actual) and destination (desired) coordinates
    # These source and destination points are defined to warp the image
    # to a grid where each 10x10 pixel square represents 1 square meter
    dst_size = 5 
    # Set a bottom offset to account for the fact that the bottom of the image 
    # is not the position of the rover but a bit in front of it
    bottom_offset = 6
    src = np.float32([[14, 140], [301 ,140],[200, 96], [118, 96]])
    dst = np.float32([[img_size[0]/2 - dst_size, img_size[1] - bottom_offset],
                      [img_size[0]/2 + dst_size, img_size[1] - bottom_offset],
                      [img_size[0]/2 + dst_size, img_size[1] - 2*dst_size - bottom_offset], 
                      [img_size[0]/2 - dst_size, img_size[1] - 2*dst_size - bottom_offset],
                      ])
       
    M = cv2.getPerspectiveTransform(src, dst)
    warped = cv2.warpPerspective(img, M, img_size)# keep same size as input image
    return warped
    
    def color_thresh(img, rgb_thresh=(170, 170, 170)):
    # Create an array of zeros same xy size as img, but single channel
    color_select = np.zeros_like(img[:,:,0])
    # Require that each pixel be above all thre threshold values in RGB
    # above_thresh will now contain a boolean array with "True"
    # where threshold was met
    above_thresh = (img[:,:,0] > rgb_thresh[0]) \
                & (img[:,:,1] > rgb_thresh[1]) \
                & (img[:,:,2] > rgb_thresh[2])
    # Index the array of zeros with the boolean array and set to 1
    color_select[above_thresh] = 1
    # Return the binary image
    return color_select

def sample_detect(img):
    #Detects the sample rocks by isolating yellow and creating a binary image array
    #initialize sampleDetect array
    sampleDetect = np.zeros_like(img[:,:,0])
    sampleDetectYellow = (img[:,:,0] > 100) \
                & (img[:,:,1] > 100) \
                & (img[:,:,2] < 60)
    sampleDetect[sampleDetectYellow] = 1
    return sampleDetect

def distAtAz(aZ,distArray,azArray):
    # deteremines max travel distance at given azimuth
    index, = np.where(azArray == find_nearest(azArray,aZ))
    print(azArray[index])
    dist = distArray[index]
    return dist

def find_nearest(array,value):
    #determines closest number in an array, in this case approximating the avg angle to on definied in the az array
    idx = (np.abs(array-value)).argmin()
    print(array[idx])
    return array[idx]

def to_polar_coords(xpix, ypix):
    # Calculate distance to each pixel
    dist = np.sqrt(xpix**2 + ypix**2)
    # Calculate angle using arctangent function
    angles = np.arctan2(ypix, xpix)
    return dist, angles

def sampleAzRange(img):
    return

def rover_coords(binary_img):
    # Identify nonzero pixels
    ypos, xpos = binary_img.nonzero()
    # Calculate pixel positions with reference to the rover position being at the 
    # center bottom of the image.  
    x_pixel = np.absolute(ypos - binary_img.shape[0]).astype(np.float)
    y_pixel = -(xpos - binary_img.shape[0]).astype(np.float)
    return x_pixel, y_pixel
    
    def rotate_pix(xpix, ypix, yaw):
    # TODO:
    # Convert yaw to radians
    yaw_rad = yaw * np.pi / 180
    xpix_rotated = (xpix * np.cos(yaw_rad)) - (ypix * np.sin(yaw_rad))
    ypix_rotated = (xpix * np.sin(yaw_rad)) + (ypix * np.cos(yaw_rad))
    # Return the result  
    return xpix_rotated, ypix_rotated

# Define a function to perform a translation
def translate_pix(xpix_rot, ypix_rot, xpos, ypos, scale): 
    # TODO:
    # Apply a scaling and a translation
    xpix_translated = (xpix_rot/scale) + xpos
    ypix_translated = (ypix_rot/scale) + ypos
    # Return the result  
    return xpix_translated, ypix_translated

def pix_to_world(xpix, ypix, xpos, ypos, yaw, world_size, scale):
    # Apply rotation
    xpix_rot, ypix_rot = rotate_pix(xpix, ypix, yaw)
    # Apply translation
    xpix_tran, ypix_tran = translate_pix(xpix_rot, ypix_rot, xpos, ypos, scale)
    # Perform rotation, translation and clipping all at once
    x_pix_world = np.clip(np.int_(xpix_tran), 0, world_size - 1)
    y_pix_world = np.clip(np.int_(ypix_tran), 0, world_size - 1)
    # Return the result
    return x_pix_world, y_pix_world

def process_image(img):
    # Example of how to use the Databucket() object defined above
    # to print the current x, y and yaw values 
    # print(data.xpos[data.count], data.ypos[data.count], data.yaw[data.count])

    # TODO: 
    # 1) Define source and destination points for perspective transform
    # 2) Apply perspective transform
    # 3) Apply color threshold to identify navigable terrain/obstacles/rock samples
    # 4) Convert thresholded image pixel values to rover-centric coords
    # 5) Convert rover-centric pixel values to world coords
    # 6) Update worldmap (to be displayed on right side of screen)
        # Example: data.worldmap[obstacle_y_world, obstacle_x_world, 0] += 1
        #          data.worldmap[rock_y_world, rock_x_world, 1] += 1
        #          data.worldmap[navigable_y_world, navigable_x_world, 2] += 1
    # constants
    
# defining worldspace

    scale = 10
    

    #apply perspective translation

    warped = perspect_transform1(img)

    #convert to binary

    colorsel = color_thresh(warped, rgb_thresh=(160, 160, 160))

    #check for Sample

    sample = sample_detect(img)
    sampleWarped = perspect_transform1(sample)

    #check for obstacle

    obstacle =  1 - colorsel


    #get Rover Position and Orientation

    rover_xpos = data.xpos
    rover_ypos = data.ypos
    rover_yaw = data.yaw
    print(np.size(sampleWarped))
    print(np.size(colorsel))
    # translate current detected environment to Rover Coodinates
    nxpix, nypix = rover_coords(colorsel)
    sxpix, sypix = rover_coords(sampleWarped)
    oxpix, oypix = rover_coords(obstacle)
    
    # Get navigable and sample pixel positions in world coords
    o_x_world, o_y_world = pix_to_world(oxpix, oypix, rover_xpos, rover_ypos, rover_yaw, data.worldmap.shape[0], scale)
    n_x_world, n_y_world = pix_to_world(nxpix, nypix, rover_xpos, rover_ypos, rover_yaw, data.worldmap.shape[0], scale)
    s_x_world, s_y_world = pix_to_world(sxpix, sypix, rover_xpos, rover_ypos, rover_yaw, data.worldmap.shape[0], scale)
    # Add pixel positions to worldmap

    data.worldmap[o_y_world, o_x_world, 0] += 1
    data.worldmap[s_y_world, s_x_world, 1] += 1
    data.worldmap[n_y_world, n_x_world, 2] += 1
    
    # 7) Make a mosaic image, below is some example code
        # First create a blank image (can be whatever shape you like)
    output_image = np.zeros((img.shape[0] + data.worldmap.shape[0], img.shape[1]*2, 3))
        # Next you can populate regions of the image with various output
        # Here I'm putting the original image in the upper left hand corner
    output_image[0:img.shape[0], 0:img.shape[1]] = img

        # Let's create more images to add to the mosaic, first a warped image
    #warped = perspect_transform(img, source, destination)
        # Add the warped image in the upper right hand corner
    output_image[0:img.shape[0], img.shape[1]:] = warped

        # Overlay worldmap with ground truth map
    map_add = cv2.addWeighted(data.worldmap, 1, data.ground_truth, 0.5, 0)
        # Flip map overlay so y-axis points upward and add to output_image 
    output_image[img.shape[0]:, 0:data.worldmap.shape[1]] = np.flipud(map_add)


        # Then putting some text over the image
    cv2.putText(output_image,"Output Video", (20, 20), 
                cv2.FONT_HERSHEY_COMPLEX, 0.4, (255, 255, 255), 1)
    data.count += 1 # Keep track of the index in the Databucket()
    
    return output_image
